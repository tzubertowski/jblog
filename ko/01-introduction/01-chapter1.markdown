# 시작하기 #

이 장에서는 힘내와 함께 시작에 관한 것입니다. 우리는 버전 제어 도구에 대한 몇 가지 배경 설명에 의해 처음에 다음이 시작됩니다 힘내 어떻게 귀하의 시스템에서 실행 마지막으로 어떻게 설치 작업을 시작 들어가야에 이동합니다. 왜 망할놈의 주위에, 왜 당신이 그것을 사용해야 이해해야한다이 장의 끝에 당신의 모든 설정을 그렇게되어야합니다.

## 버전 제어 란 ##

어떤 버전 제어, 그리고 왜 상관해야 하나요? 버전 관리 시스템입니다 파일에 레코드를 변경하거나 파일의 시간이 너무 이상하면 나중에 특정 버전의 설정 리콜 수있습니다. 당신 파일을 받고 버전 제어 소프트웨어의 소스 코드를 사용하여이 책에 예제, 비록 현실에 대한 당신의 컴퓨터에있는 파일의 거의 모든 유형이 할 수있습니다.

경우 또는 웹 디자이너 및 그래픽 이미지 또는 레이아웃의 모든 버전을 계속하고 싶어합니다 (이는 가장 확실하게하려면), 버전 제어 시스템 (VCS는)를 사용하여 아주 현명한 일이 원하는 것이다. 그것은 다시 이전의 상태로 되돌리려면 파일을 다시 이전 상태로 되돌리려면 전체 프로젝트, 시간이 지남에 변경 사항을, 마지막으로 바뀌었습니다 누가 뭔가가 문제의 원인이 될 수도 비교해 볼 수 있도록, 누가 문제와 때, 그리고 더 많은 도입했다. VCS는 사용하는 경우도 일반적으로 당신이 일을 망치거나 파일이 손실은, 당신은 쉽게 복구할 수있습니다. 또한, 당신은 매우 작은 오버헤드가 모든이에게 갖다.

### 로컬 버전 제어 시스템 ###

많은 사람들이 선택의 여지는 버전 제어 방식을 다른 디렉토리에 (아마도 시간이 찍혀 디렉토리에 그들이 똑똑한 경우) 파일을 복사하는 것입니다. 이유는 너무 간단하다 이러한 접근 방식은 매우 일반적이지만, 그것도 엄청난 오류가 발생하기 쉬운입니다. 그것은 당신과 우연히이야 잘못된 파일 또는 복사에 쓸 디렉토리를 잊기 쉬운 파일, 당신에게 말은하지 않습니다.

이 문제를 해결하려면, 프로그래머는 오래 전 (그림 1-1 참조) 그 개정을 통제 아래에있는 파일에 대한 모든 변경 사항을 계속 간단한 데이터베이스를 가지고 지역 VCSs 개발했다.

Insert 18333fig0101.png
그림 1-1. 로컬 버전 제어 다이어그램.

하나는 더 많은 인기를 VCS는 도구는 여전히 많은 컴퓨터에 분산되어 오늘날 시스템 RCS라는 기록했다. 심지어 인기있는 맥 OS X 운영 체제를하면 개발자 도구를 설치 RCS 명령을 포함합니다. 이 도구는 기본적으로 패치 세트를 유지하는 작품 (즉, 디스크에 특별한 형식이 다른 하나의 변화에서 파일 사이의 차이점); 말하면 그 다음에 다시하실 수있습니다 언제 어느 시점에서처럼 추가하여 파일을 만들려면 어떻게 생겼는지를 모두 패치.

### 중앙 집중식 버전 제어 시스템 ###

다음의 주요 문제는 사람들이 그들이 발생하는 다른 시스템에서 개발자와 협력이 필요합니다. 이 문제를 처리하기 위해, 중앙 집중식 버전 제어 시스템 (CVCSs)을 개발했다. CVS는, Subversion은 등과 같은 이러한 시스템, 그리고 퍼포, 그리고 고객의 숫자가 모든 버전의 파일이 들어있는 단일 서버가 그 중앙 장소에서 파일을 체크 아웃. 수년 동안,이 (그림 1-2 참조) 버전 제어를위한 표준되었습니다.

Insert 18333fig0102.png
그림 1-2. 중앙 버전 제어 다이어그램.

이 설정을 로컬 VCSs, 특히 많은 이점을 제공한다. 예를 들어, 모든 프로젝트에 다른 사람들은 뭐하고있다가 어느 정도 알고 있죠. 누가 무엇을, 그리고 그것보다 훨씬 그것을 모든 클라이언트에 로컬 데이터베이스와 거래를하는 것입니다 CVCS 관리를 쉽게 할 수있는 이상의 관리자가 세부적으로 제어할 수있습니다.

그러나,이 설정도 몇 가지 심각한 단점이있다. 가장 명백한 실패의 중앙 서버를 나타내는 단일 지점입니다. 만약 서버가 1 시간 동안 아무도 그 시간 모두에서 협업할 수 또는 그들이 최선을 다하고있습니다 뭐든 버전의 변경 내용을 저장하는 동안갑니다. 만약 중앙 데이터베이스가 손상된 경우에 하드 디스크, 그리고 적절한 백업을 보관하지 않은, 당신은 절대적으로 모든 것을 원하는 사람들을 제외하고 하나의 스냅샷이 프로젝트의 전체 역사를 잃고 자신의 로컬 컴퓨터에서이 일어날. 지역 VCS는 시스템이 동일한 문제를 겪고 때마다 당신이 한 장소에서 프로젝트의 전체 역사를 가지고, 당신은 모든 걸 잃을 위험.

### 버전 제어 시스템 분산 ###

여기서 버전 컨트롤 시스템 (DVCSs) DVCS 단계에서 안으로 힘내, 의욕, 바자 또는 Darcs (예)로, 고객이 단지 파일의 최신 스냅샷을 선택하지 마십시오 : 그들은 완전히 거울을 분산 저장소입니다. 따라서 서버에있는 경우, 그리고 죽으면 이러한 시스템을 그것을 통해 모든 클라이언트가 저장소의 백업 서버로 복원하는 방법을 복사할 수있습니다 협업했다. 모든 결제 정말 모든 데이터의 전체 백업 (그림 1-3 참조)입니다.

Insert 18333fig0103.png
그림 1-3. 분산 버전 관리 다이어그램.

또한, 이러한 시스템의 많은 꽤 잘 그들이 작업을 수있는 몇 가지 원격 저장소를 갖는, 그래서 다른 방법으로 사람들이 다른 그룹과 같은 프로젝트 내에서 동시에 협업할 수있는 거래. 이것은 당신이 계층 모델과 같은 중앙 집중화된 시스템에서 가능하지 않습니다 워크플로우의 여러 유형을 설정할 수있습니다.

## 망할놈의 짧은 역사 ##

인생에서 많은 좋은 것들과 마찬가지로, 망할놈의 창조적 파괴와 불타는 논쟁의 비트와 함께 시작했다. 리눅스 커널은 상당히 큰 범위의 오픈 소스 소프트웨어 프로젝트입니다. 리눅스 커널의 유지 보수 (1991에서 2002 사이), 소프트웨어에 대한 변경 사항의 일생의 대부분을위한 패치 및 보관된 파일을 주변에 전달했다. 2002 년, 리눅스 커널 프로젝트는 독자적인 시스템이라는 DVCS 비트 키퍼를 사용하기 시작했다.

2005 년, 리눅스 커널을 개발하고 비트 키퍼가 고장이 회사가 개발한 상용 사회 사이의 관계, 그리고 자유의 도구의 충전 상태를 취소했다. 이것은 (특히 리누스 토발즈, 리눅스의 창시자)에 자신의 도구를 개발하는 몇 가지 비트 키퍼를 사용하는 동안 그들이 배운 교훈을 바탕으로 리눅스 개발 커뮤니티하라는 메시지가 나타나면. 일부는 새로운 시스템의 목표였다는 다음과 같습니다 :

* 속도
* 심플한 디자인
* 이외의 강력한 지원 선형 개발을 병렬로 지점 (수천)
* 완전 분산
* 에이블 리눅스 커널과 같은 대형 프로젝트를 효율적으로 처리 (속도와 데이터 크기)

2005 년 탄생 이래, 망할놈의 발전 및 성숙 쉽게 사용할 수와 아직은 이러한 초기 자질을 보유합니다. 그것은 매우 빨리, 아주 큰 프로젝트를 효율적이고, 그 이외의 놀라운 분기 시스템 선형 개발하고있다 () 제 3 장 참조하십시오.

## 망할놈의 기본 ##

그래서, 무슨 말도 안되는 소리 같지만 힘내 무엇입니까? 만약 당신이 어떤 망할놈의 작동 방법의 기초, 그리고 효과적으로 아마 훨씬 쉬울 것입니다 힘내 사용하는 이해이 흡수하는 중요한 부분이다 당신을 위해. 보시다시피, 망할놈의 내용은 당신이 서브와 퍼포 같은 다른 VCSs에 대해 알고있을 것을 당신의 마음을 비우려고; 일을 이렇게하면 도구를 사용하여 섬세하고 혼동을 피하기 위해 도움이됩니다. 그것을 사용하는 동안 힘내 매장과 생각에 대한 정보를 많이 다르게 이러한 다른 시스템에 비해, 비록 사용자 인터페이스가 매우 유사합니다; 그 차이를 이해 해지고 혼란스러워하지 못하도록 도움이됩니다.

### 스냅샷, 아니 차이점 ###

힘내 및 기타 VCS는 사이에 큰 차이 (Subversion을 친구 포함) 방식으로 힘내이며 데이터에 대해 생각한다. 개념, 파일의 변경 사항 목록을 기반으로 대부분의 다른 시스템 정보를 저장합니다. 이러한 시스템 (CVS는, Subversion을, 퍼포, 바자 등) 그들은 파일의 설정 및 변경 시간이 지남에 따라 각 파일에 만들어진만큼 그림 1-4에서 그림과 같이 계속 정보를 같아요.

Insert 18333fig0104.png
그림 1-4. 다른 시스템의 각 파일의 기본 버전을 변경 데이터를 저장하는 경향이있다.

힘내 생각하지 않습니다 이런식으로 데이터를 저장할 수있습니다. 대신, 힘내 자사의 데이터를 미니 파일 시스템의 스냅샷을 설정처럼 생각한다. 매번 당신은, 커밋 또는 힘내에서 귀하의 프로젝트의 상태를 저장하면 기본적으로 모든 파일을 그 순간에 매장이 스냅샷에 대한 참조를 어떻게 생겼는지 사진 걸립니다. 효율적으로, 만약 파일이 변경되지 않은, 힘내 파일을 다시 저장하지 않습니다 단지 링크가 이미 저장된 파일은 이전과 동일. 힘내 그림 1-5처럼 데이터에 대해 생각한다.

Insert 18333fig0105.png
그림 1-5. 시간의 경과에 프로젝트의 스냅샷으로 망할놈의 데이터를 저장합니다.

이 망할놈의 거의 모든 다른 VCSs 사이에 중요한 차이가있습니다. 그 망할놈의 대부분의 다른 시스템에 이전 세대에서 복사한 버전 제어의 거의 모든 측면을 재고해 수있습니다. 이것은 약간의 대단히 강력한 도구를 꼭대기에 지어진 것이 아니라 단순히 VCS는 함께 미니 파일 시스템을 더 힘내 수있습니다. 귀하의 데이터를 이런식으로 우리가 제 3 분기 망할놈의 덮개를 생각하여 이득의 일부 혜택을 탐험합니다.

### 거의 모든 작업 로컬 ###

힘내에서 대부분의 작업에만 작동하도록 - 일반적으로 어떠한 정보도 네트워크상의 다른 컴퓨터에서 필요한 로컬 파일과 리소스를 필요합니다. 만약 당신이 CVCS를 사용하는지, 어디에 대부분의 작업, 망할놈의 관점에서 그 속도의 신들이 속세를 떠난 능력이 망할놈의 축복을 생각하게됩니다 네트워크 지연 오버헤드가있다. 왜냐하면 당신이 로컬 디스크에있는 프로젝트는 바로 거기의 전체 역사를 가지고 대부분의 작업을 거의 즉각 보인다.

예를 들어, 힘내 서버로 가서 역사를 그리고 당신을위한 표시가 필요하지 않습니다 그것은 단순한 직접 로컬 데이터베이스에서 읽습 프로젝트의 역사를 탐색할 수있습니다. 이렇게하면 거의 즉시 프로젝트 역사를 볼 것을 의미합니다. 만약 변경 사항을 파일의 현재 버전 개월 전 파일 사이의 도입을보고 싶어, 힘내 개월 전 파일을 로컬 차이를 계산을 할 대신하거나 원격 서버에 요청하는 데 그것을 어떻게 찾아볼 수있습니다 또는 로컬로 그것을 할 원격 서버에서 파일의 이전 버전을 당겨.

이것은 또한 당신이 오프라인을 켜거나 VPN에 매우 당신이 할 수 없어 조금 남아있는 것을 의미합니다. 만약 당신이 비행 기나 기차를 타고 가서 일을 좀하려면, 당신이 행복까지 업로드 네트워크 연결에 도착 커밋 수있습니다. 만약 당신이 집에 가서 귀하의 VPN 클라이언트가 올바르게 작동 얻을 수 없다, 당신은 여전히 사용할 수있습니다. 많은 다른 시스템에서는, 이렇게하면 하나 또는 고통스러운 것은 불가능하다. 퍼포스 있음, 예를 들면, 당신은 당신이 서버에 연결되지 않은 할 수 없어, 그리고 CVS에서 Subversion을 그리고, 당신이 파일을 편집할 수 있지만 귀하의 데이터베이스 (되었기 때문에 데이터베이스)가 오프라인 상태 변경 내용을 커밋 수없습니다 . 이것은 큰 거래를 보이되지 않을 수도있습니다,하지만 당신은 그것을 큰 차이가 무엇을 할 수 놀랄 수있습니다.

### 망할놈의 무결성가 ###

힘내에서 모든 체크하기 전에 그것 저장되어 다음에 그 체크섬에 의해 참조된입니다 요약될. 이렇게 힘내하지 않고 그것에 대해 아는 모든 파일이나 디렉토리의 내용을 변경 불가능을 의미합니다. 이 기능은 GIT에 최저 수준에와 철학에 필수적인 부분입니다 내장되어있습니다. 당신은 교통 정보를 잃을 수 없거나 힘내 그것을 감지할 수없이 손상이 파일을 가져올.

망할놈의 메커니즘이 checksumming에 대한은 SHA - 1 해시 전화를 사용합니다. 이것은 40 - 문자 문자열을 16 진수 문자 (0-9 및 구성되어 - f 옵션) 및 힘내에서 파일이나 디렉토리 구조의 내용을 기반으로 계산됩니다. 은 SHA - 1 해시는 다음과 같이 보입니다 :

24b9da6552252987aa493b52f8696cd6d3b00373

너 때문에 너무 많이 사용 그들이 해시는 망할놈의 여기저기 값을 볼 수있습니다. 사실, 파일 이름을하지 않음으로써 힘내 상점 빼고는 다 망할놈의 데이터베이스에있는 내용의 해시 값에 의해 처리할 수.

### 힘내 일반적으로 데이터만 추가 ###

하면, 힘내에서 작업을 할 거의 모든 그들의 유일한 망할놈의 데이터베이스에 데이터를 추가할 수있습니다. 그것은 매우 취소할 수 없거나 어떤 방식으로 데이터를 지울 수 있도록 아무것도 할 시스템 어렵습니다. 모든 VCS는 마찬가지로, 당신은 잃을 수있다 또는 당신이 아직 커밋되지 않은 변경 사항을 엉망으로,하지만 후에 GIT에 스냅샷을 커밋, 그것은 매우 어렵습니다 잃고, 특히 만일 당신이 정기적으로 다른 저장소 데이터베이스를 밀어.

우리가 심각하게 일을 망쳐의 위험없이 할 수있는 실험을 아는 기쁨이 망할놈를 사용합니다. 힘내 저장하는 방법에 자사의 데이터를 심도 좀 더 당신이 어떻게 볼 것 잃어버린 데이터를 복구할 수있다 "덮어 아래에서"제 9있습니다.

### 3 미국 ###

자, 주목을 지불해야합니다. 이렇게하면 원활하게 이동하여 학습 과정의 나머지 원하는 힘내 대한 기억 중요한 건입니다. 망할놈의 세 가지 기본 상태는 귀하의 파일에 거주하고있습니다 :이,, 수정 및 개최 헌신. 최선을 다하고 뜻을 안전하게 데이터를 로컬 데이터베이스에 저장됩니다. 수정된 것을 의미하지만 그 파일을 변경하여 데이터베이스에 아직 커밋되지 않은있습니다. 즉, 당신이 옆에있는 스냅샷을 커밋에 들어가 현재 버전에서 수정된 파일을 표시한 연출한.

이 망할놈의 프로젝트의 세 가지 주요 섹션에 우리가 리드 : 망할놈의 디렉토리, 작업 디렉토리, 그리고 준비 영역입니다.

Insert 18333fig0106.png
그림 1-6. 작업 디렉토리, 지역의 준비, 그리고 자식 디렉터리에있습니다.

힘내 힘내 디렉토리는 어디에 저장하여 프로젝트에 대한 메타 데이터 및 개체를 데이터베이스. 이 망할놈의 가장 중요한 부분이며, 무엇을하면 다른 컴퓨터에서 저장소를 복제 복사입니다.

작업 디렉토리 프로젝트의 버전 중 하나 하나 체크 아웃됩니다. 이러한 파일은 망할놈의 디렉토리에 압축 데이터베이스의 철수하고 당신을 사용하거나 수정하여 디스크에 배치.

준비 영역에 파일을 간단하고, 일반적으로 여러분 힘내 디렉토리에, 그게 다음 커밋에 들어갈 예정에 대해 정보 저장소에 포함되어있습니다. 그것은 때때로 지수라고도했지만, 그것을 위해 표준을 준비 영역으로 참조되고 있어요.

기본 힘내 워크플로우 이런 식입니다 :

1. 귀하의 작업 디렉토리에있는 파일을 수정할 수있습니다.
2. 당신은 당신의 준비 영역에 그들의 스냅샷 파일을 추가 단계입니다.
3. 당신, 이는 그들이 준비 지역 상점에있는 파일을 커밋 할 필요가 스냅샷을 여러분 힘내 디렉터리를 영구적으로합니다.

만약 파일의 특정 버전의 자식 디렉터리에있는 경우, 그것을 최선을 다하고 고려됩니다. 하지만, 만약 수정이 준비 영역에 추가되었습니다, 그것을 개최합니다. 그리고 이후지만, 체크 아웃 개최되지 않은 경우가 변경되었습니다, 그것을 수정합니다. 제 2 장, 당신은 이러한 상태에 대해 자세히 살펴보겠습니다 방법 중 하나를 그들을 활용할 수 있으며 완전히 연출된 부분을 건너 뛰십시오.

### 설치 힘내 ###

좀 힘내을 사용하여 들어가 보자. 중요한 것부터 먼저 - 당신이 그것을 설치해야합니다. 당신은 여러 가지 방법으로 얻을 수 있으며 두 가지 중요한 것들 원본하거나 설치하는 데 필요한 플랫폼을위한 기존의 패키지를 설치하고있습니다.

### 설치 소스에서 ###

만약 당신이 할 수 있기 때문에 당신이 가장 최근 버전을받을거야, 일반적으로 원본 망할놈의 설치에 유용합니다. 망할놈의 각 버전에 유용한 UI가 개선을 포함, 그래서 최신 버전을 받고 경향이 종종 느낀다면, 네가 소스로부터 소프트웨어를 컴파일하고 편안하게 최상의 경로입니다. 또한 많은 리눅스 배포판은 아주 오래된 패키지를 포함하는 경우; 그렇게하지 않으면 매우 올라있어 - 최고의 내기있을 수있습니다 - 최신 배포판 또는 백포트를 사용하는 경우 소스에서 다시 설치하십시오.

힘내 설치하려면, 당신은 그 망할놈에 따라 다음과 같은 라이브러리 :,,, expat하려면 openssl zlib을 곱슬 곱슬하게 가지고, 필요 libiconv. 예를 들어, 만약 당신이 시스템에 냠 페도라 (예) 또는 apt - get을 가지고있어 (데비안 기반의 시스템과 같은), 당신의 모든 종속성을 설치하려면 다음 명령 중 하나를 사용할 수있습니다 :

$ 냠 곱슬 곱슬 - devel expat - devel로 gettext - devel \ 설치
zlib을하려면 openssl - devel - devel

$는 apt - dev에 gettext를 \ - gnutls - dev에 설치 얻을 libexpat1 libcurl4
libz - dev에

때 필요한 모든 종속성을 가지고 가서 수 망할놈의 웹 사이트에서 최신 스냅샷을 잡으 :

http://git-scm.com/download

그럼, 컴파일 및 설치 :

$ 타르 - zxf 이눔아 - 1.6.0.5.tar.gz
$ CD를 이눔아 - 1.6.0.5
$ 접두어 =는 / usr / 모든 지역을
$ sudo를 =는 / usr / 설치 로컬 접두사를 확인

후에이 완료되면, 당신도 힘내 자체를 통해 업데이 트에 대한 힘내 얻을 수있습니다 :

$ 이눔아 이눔아 클론 : / / git.kernel.org / 펍 / SCM에서 / 자식 / git.git

### 설치 Linux에서 ###

만약 당신이 리눅스에서 바이너리 설치를 통해 힘내 설치하려면, 일반적으로 너무 기본적인 패키지를 통해 할 수있는 관리 도구는 귀하의 배포와 함께 제공됩니다. 만약 당신이 페도 라에있는거야, 당신은 냠 사용할 수있습니다 :

$ 냠 자식을 설치 코어

아니면 당신이 데비안에 있어요 - 우분투 같은 배포판을 기반으로, 시도는 apt - get은 :

$는 apt - 이눔아 설치 얻을 코어

### 설치 Mac에서 ###

저기 힘내 Mac에서 설치하는 두 가지 간단한 방법입니다. 가장 쉬운 방법 (그림 1-7 참조) : 당신이 구글 코드 페이지로부터 다운로드할 수있습니다 그래픽 망할놈의 설치, 사용하는 것입니다

http://code.google.com/p/git-osx-installer

Insert 18333fig0107.png
그림 1-7. 힘내 OS X의 설치.

다른 주요 방법을 통해 힘내 MacPorts를 설치하는 것입니다 (``) http://www.macports.org. 만약 당신이 망할놈의 설치를 통해 MacPorts 설치

$ sudo를 포트에 자식을 설치 코어 + svn + 의사 + bash_completion + gitweb

모든 엑스트라를 추가할 필요는 없지만, 아마 당신을 포함하기를 원할거야 + svn 경우 혹시 Subversion은 저장소와 (제 8 장 참조) 힘내 사용해야합니다.

### 설치 윈도우에서 ###

힘내 Windows에서 설치 매우 간단합니다. msysGit 프로젝트는 하나 쉽게 설치 절차했다. 간단히 말하면, 구글 코드 페이지에서 설치 프로그램을 exe 파일을 다운로드하고 실행합니다 :

http://code.google.com/p/msysgit

후에 설치되어있는 경우 (즉, 들어올 것입니다 SSH 클라이언트를 포함하여 모두 명령줄 버전 이상) 및 표준 GUI를 편리.

### 처음 힘내 설치 ###

이제 여러분의 시스템에 힘내 가지고 여러분 힘내 환경을 사용자 정의하는 몇 가지 일을하고 싶어합니다. 너 한번만 이런 일을해야한다; 그들은 업그레이 드를 사이에 제 곁에 계셔야합니다. 또한 명령을 다시 실행하여 언제든지 변경할 수있습니다.

망할놈의 도구를 함께 데려 및 구성 변수를 설정할 수있습니다 전화 오면 자식 구성하는 방법을 망할놈의 외모와 운영의 모든 측면을 통제. 이러한 변수는 세 가지 다른 위치에 저장되어있을 수있습니다 :

*`은 / etc /`파일을 gitconfig : 시스템에있는 모든 사용자와 모든 리포지 토리에 대한 값이 포함되어있습니다. 만일 당신이 옵션`을 통과 - 시스템`에`config를 자식, 그것을 읽고 해당 파일을 구체적으로부터 씁니다.
*`~ /.`파일을 gitconfig : 사용자에게 특정. 넌 망할놈의 읽기 및이 파일에 특별히`-`글로벌 옵션을 전달하여 작성 할 수있습니다.
자식 디렉터리에 * config 파일 (즉 .git,`은 /`설정) 현재 사용하고 계시는 어떤 저장소의 종류 : 단일 저장소에 특정. 각 단계는 이전 단계에있어서`.git 값을 값을 무시 /`트럼프의 이러한 설정은 / etc / gitconfig`.

Windows 시스템에서, 힘내````$ 홈 디렉토리에 (`에 C : \ 문서 및 설정 \ $ 사용자`대부분의 사람들에게) 파일 gitconfig. 찾습니다. 비록 그것이 어디에 있든 당신이 Windows 시스템에 설치하면 실행 망할놈의 설치를 결정합니다 MSys 루트, 상대의 그것은 여전히 / 용 등 / gitconfig 보인다.

### 귀하의 신원을 ###

힘내하면 설치해야합니까 우선 사용자 이름과 전자 메일 주소를 설정하는 것입니다. 왜냐하면 모든 힘내 커밋이 중요한이 정보를 사용합니다, 그리고 그것을 immutably 당신 주위에 패스를 저지른에 덜떨어진 :

$ 자식 설정 - 글로벌 user.name "John Doe의"
$ 자식 설정 - 글로벌 user.email johndoe@example.com

다시 말하지만, 당신이 한 번만 그 때문에 항상 힘내 시스템에서하는 일은 그 정보를 사용할 것입니다 만약 당신이`-`글로벌 옵션을 통과 이렇게해야합니다. 만약 당신이 다른 이름 또는 특정 프로젝트에 대한 전자 메일 주소와 함께이 오버 라이드하고 싶다면, 당신은`-`글로벌 옵션을 선택하지 않고 당신이 그 프로젝트에있어 명령을 실행할 수있습니다.

### 당신의 에디터 ###

이제 귀하의 신원을 구성할 수있습니다 힘내 입력하면 메시지에 당신을 필요로하는 데 사용됩니다 기본 텍스트 편집기 설정됩니다. 기본적으로, 힘내 일반적으로 귀하의 시스템의 기본 편집기를 사용 바이올렛 또는 Vim은. 만약 당신이 emacs와 같은 다른 텍스트 편집기를 사용하려면 다음 작업을 수행할 수있습니다 :

$ 자식 설정 - 글로벌 core.editor 이맥스

### 당신 Diff 도구 ###

당신을 구성할 수있습니다 또 다른 유용한 옵션이 충돌 병합을 해결하는 데 사용하는 기본은 diff 도구입니다. 당신 vimdiff 사용하고자하는 말 :

$ 자식 설정 - 글로벌 merge.tool vimdiff

힘내, kdiff3, tkdiff, xxdiff, vimdiff, gvimdiff, ecmerge 등장할 융합 수용 및 병합 도구를 유효로 opendiff. 당신은 또한 사용자 정의 도구를 설정할 수있습니다; 뭐하는 대한 자세한 내용은 제 7 장 보입니다.

### 귀하의 설정 확인 ###

만약 당신이 설정을 확인하려면, 당신이 망할놈의 그 지점에서 찾을 수있는 모든 환경 설정 목록에`명령`자식 설정 - 목록을 사용할 수있습니다 :

$ 자식 설정 - 목록
user.name = 스콧 Chacon
user.email = schacon@gmail.com
color.status = 자동
color.branch = 자동
color.interactive = 자동
color.diff = 자동
...

힘내 있기 때문에 다른 파일에서 읽습니다 키와 동일한 키를 두 번 이상 (`은 / etc / gitconfig`와`~ /.`gitconfig 볼 수있습니다, 예를 들면). 이 경우, 각각의 고유한 망할놈의 열쇠를보고 그것에 대한 마지막 값을 사용합니다.

또한, 망할놈의 특정 키 값을 ()`열쇠`config를 입력하여 자식이 무슨 생각을 확인할 수있습니다 :

$ 이눔아 설정 user.name
스콧 Chacon

### 도움말 얻기 ###

힘내 사용하는 동안 있으면 도움이 절대 필요, 거기 매뉴얼 페이지 () 어떤 망할놈의 명령에 대한 도움을 맨페이지 : 얻을 세 가지 방법이있습니다

$ 이눔아 도움이 <verb>
$ <verb> 이눔아 - 도움말
$ 남자 이눔아 - <verb>

예를 들어, 실행하여 설정 명령에 대한 맨페 도움을받을 수

$ 이눔아 도움이 구성

당신이 아무데도 오프라인에서 액세스할 수있는 이러한 명령은 잘됩니다.
만약 man 페이지이 책은 충분하지하고 필요하면 freenode IRC 서버 (irc.freenode.net)에`# 자식`이나`# github`채널을 시도할 수있습니다 - 사람 도움이있습니다. 이러한 채널을 정기적으로 사람 모두 힘내 대해 자주 도움을하고자하는 지식입니다 수백명의 사람들이 가득합니다.

## 요약 ##

당신은 어떻게 당신이 사용되었을 수도있습니다 CVCS 다른 무엇이 망할놈의 기본적인 이해해야합니다. 당신은 또한 현재 여러분의 시스템에 대한 사용자의 개인 신원을 함께 설정이 망할놈의 작업 버전이 있어야합니다. 지금은 어떤 망할놈의 기초를 배울 시간이야.
